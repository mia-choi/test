package chap10;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;

public class A15_DateFormatEx4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
  String pattern="yyyy/MM/dd";
  DateFormat df = new SimpleDateFormat(pattern);
  Scanner s = new Scanner(System.in);
  
  Date inDate=null;
  
  System.out.println("날짜를 "+pattern + "의 형태로 입력해주세요.(입력예:2015/12/31)");
  
  while(s.hasNextLine()) {
	  try {
		  inDate = df.parse(s.nextLine());
		  break;
	  }catch(Exception e) {
		  System.out.println("날짜를 "+pattern + "의 형태로 다시 입력해주세요.(입력예:2015/12/31)");
	  }
  }//while
  
  Calendar cal=Calendar.getInstance();
  cal.setTime(inDate);
  Calendar today = Calendar.getInstance();
  long day = (cal.getTimeInMillis() - today.getTimeInMillis())/(60*60*1000);
  System.out.println("입력하신 날짜는 현재와 "+day+"시간 차이가 있습니다.");
	}//main
}
/*출력결과
 * 
 * 날짜를 yyyy/MM/dd의 형태로 입력해주세요.(입력예:2015/12/31)
d
날짜를 yyyy/MM/dd의 형태로 다시 입력해주세요.(입력예:2015/12/31)
2015/12/31
입력하신 날짜는 현재와 -47387시간 차이가 있습니다.

화면으로부터 날짜를 입력받아서 계산결과를 출력하는 예제이다.
while과 try - catch 문을 이용해서 사용자가 올바른 형식으로 날짜를 입력할 때까지 반복해서 입력받도록 하였다.
지정된 패턴으로 입력되지 않은 경우, parse메서드를 호출하는 부분에서 예외(Parse Exception)가 발생하기 때문에 while문을 
벗어나지 못한다.

 */